#!/bin/csh -f
#SBATCH --job-name=test_B
#SBATCH --time=04:59:00
#SBATCH --nodes=32
##SBATCH --ntasks=128
#SBATCH --cpus-per-task=1
#SBATCH --exclusive
###SBATCH --mail-type=END
###SBATCH --mail-user=xyz@abc.com
#SBATCH --output=slurm.out

# ---------------------------------------- 
# PE LAYOUT: 
#   total number of tasks  = 128 
#   maximum threads per task = 1 
#   cpl ntasks=128  nthreads=1 rootpe=0 ninst=1 
#   cam ntasks=128  nthreads=1 rootpe=0 ninst=1 
#   clm ntasks=128  nthreads=1 rootpe=0 ninst=1 
#   cice ntasks=128  nthreads=1 rootpe=0 ninst=1 
#   pop2 ntasks=128  nthreads=1 rootpe=0 ninst=1 
#   sglc ntasks=128  nthreads=1 rootpe=0 ninst=1 
#   swav ntasks=128  nthreads=1 rootpe=0 ninst=1 
#   rtm ntasks=128  nthreads=1 rootpe=0 ninst=1 
#   
#   total number of hw pes = 128 
#     cpl hw pe range ~ from 0 to 127 
#     cam hw pe range ~ from 0 to 127 
#     clm hw pe range ~ from 0 to 127 
#     cice hw pe range ~ from 0 to 127 
#     pop2 hw pe range ~ from 0 to 127 
#     sglc hw pe range ~ from 0 to 127 
#     swav hw pe range ~ from 0 to 127 
#     rtm hw pe range ~ from 0 to 127 
# ---------------------------------------- 
cd /home/export/online1/cesm06/wanwb/cesm1_3_beta17_sehires31/scripts/test_B

./Tools/ccsm_check_lockedfiles || exit -1
source ./Tools/ccsm_getenv     || exit -2

if ($BUILD_COMPLETE != "TRUE") then
  echo "BUILD_COMPLETE is not TRUE"
  echo "Please rebuild the model interactively"
  exit -2
endif

# BATCHQUERY is in env_run.xml
setenv LBQUERY "TRUE"
if !($?BATCHQUERY) then
  setenv LBQUERY "FALSE"
  setenv BATCHQUERY "undefined"
else if ( "$BATCHQUERY" == 'UNSET' ) then
  setenv LBQUERY "FALSE"
  setenv BATCHQUERY "undefined"
endif

# BATCHSUBMIT is in env_run.xml
setenv LBSUBMIT "TRUE"
if !($?BATCHSUBMIT) then
  setenv LBSUBMIT "FALSE"
  setenv BATCHSUBMIT "undefined"
else if ( "$BATCHSUBMIT" == 'UNSET' ) then
  setenv LBSUBMIT "FALSE"
  setenv BATCHSUBMIT "undefined"
endif

# --- Create and cleanup the timing directories---

if !(-d $RUNDIR) mkdir -p $RUNDIR || "cannot make $RUNDIR" && exit -1
if (-d $RUNDIR/timing) rm -r -f $RUNDIR/timing
mkdir $RUNDIR/timing
mkdir $RUNDIR/timing/checkpoints

# --- Determine time-stamp/file-ID string ---
setenv LID "`date +%y%m%d-%H%M%S`"

set sdate = `date +"%Y-%m-%d %H:%M:%S"`
echo "run started $sdate" >>& $CASEROOT/CaseStatus

echo "-------------------------------------------------------------------------"
echo " CESM BUILDNML SCRIPT STARTING"
echo " - To prestage restarts, untar a restart.tar file into $RUNDIR"

cd $CASEROOT
./preview_namelists 
if ($status != 0) then
   echo "ERROR from preview namelist - EXITING"
   exit -1
endif

echo " CESM BUILDNML SCRIPT HAS FINISHED SUCCESSFULLY"
echo "-------------------------------------------------------------------------"

echo "-------------------------------------------------------------------------"
echo " CESM PRESTAGE SCRIPT STARTING"
echo " - Case input data directory, DIN_LOC_ROOT, is $DIN_LOC_ROOT"
echo " - Checking the existence of input datasets in DIN_LOC_ROOT"

# This script prestages as follows
# - DIN_LOC_ROOT is the local inputdata area, check it exists
# - check whether all the data is in DIN_LOC_ROOT
# - prestage the REFCASE data if needed

cd $CASEROOT

if !(-d $DIN_LOC_ROOT) then
  echo " "
  echo "  ERROR DIN_LOC_ROOT $DIN_LOC_ROOT does not exist"
  echo " "
  exit -20
endif

if (`./check_input_data -inputdata $DIN_LOC_ROOT -check | grep "unknown" | wc -l` > 0) then
   echo " "
   echo 'Any files with "status unknown" below were not found in the'
   echo 'expected location, and are not from the input data repository.'
   echo 'This is informational only; this script will not attempt to'
   echo 'find these files. If CESM can find (or does not need) these files'
   echo 'at run time, no error will result.'
   ./check_input_data -inputdata $DIN_LOC_ROOT -check
   echo " "
endif

if (`./check_input_data -inputdata $DIN_LOC_ROOT -check | grep "missing" | wc -l` > 0) then
   echo "Attempting to download missing data:"
   ./check_input_data -inputdata $DIN_LOC_ROOT -export
endif 

if (`./check_input_data -inputdata $DIN_LOC_ROOT -check | grep "missing" | wc -l` > 0) then
   echo " "
   echo "The following files were not found, they are required"
   ./check_input_data -inputdata $DIN_LOC_ROOT -check
   echo "Invoke the following command to obtain them"
   echo "   ./check_input_data -inputdata $DIN_LOC_ROOT -export"
   echo " "
   exit -30
endif

if (($GET_REFCASE == 'TRUE') && ($RUN_TYPE != 'startup') && ($CONTINUE_RUN == 'FALSE')) then
  set refdir = "ccsm4_init/$RUN_REFCASE/$RUN_REFDATE"

  if !(-d $DIN_LOC_ROOT/$refdir) then
    echo "*****************************************************************"
    echo "ccsm_prestage ERROR: $DIN_LOC_ROOT/$refdir is not on local disk"
    echo "obtain this data from the svn input data repository:"
    echo "  > mkdir -p $DIN_LOC_ROOT/$refdir"
    echo "  > cd $DIN_LOC_ROOT/$refdir"
    echo "  > cd .."
    echo "  > svn export --force https://svn-ccsm-inputdata.cgd.ucar.edu/trunk/inputdata/$refdir"
    echo "or set GET_REFCASE to FALSE in env_run.xml, "
    echo "   and prestage the restart data to $RUNDIR manually"
    echo "*****************************************************************"
    exit -1
  endif 

  echo " - Prestaging REFCASE ($refdir) to $RUNDIR"
  if !(-d $RUNDIR) mkdir -p $RUNDIR || "cannot make $RUNDIR" && exit -1
  foreach file ($DIN_LOC_ROOT/$refdir/*${RUN_REFCASE}*) 
     if !(-f $RUNDIR/$file:t) then
        ln -s $file $RUNDIR || "cannot prestage $DIN_LOC_ROOT/$refdir data to $RUNDIR" && exit -1
     endif
  end
  cp $DIN_LOC_ROOT/$refdir/*rpointer* $RUNDIR || "cannot prestage $DIN_LOC_ROOT/$refdir rpointers to $RUNDIR" && exit -1

  cd $RUNDIR
  set cam2_list = `sh -c 'ls *.cam2.* 2>/dev/null'`
  foreach cam2_file ($cam2_list)
    set cam_file = `echo $cam2_file | sed -e 's/cam2/cam/'`
    ln -fs $cam2_file $cam_file
  end

  chmod u+w $RUNDIR/* >& /dev/null
endif
cd $CASEROOT

echo " CESM PRESTAGE SCRIPT HAS FINISHED SUCCESSFULLY"
echo "-------------------------------------------------------------------------"

echo "-------------------------------------------------------------------------"
echo " CESM BUILDNML SCRIPT STARTING"
echo " - To prestage restarts, untar a restart.tar file into $RUNDIR"

cd $CASEROOT
./preview_namelists 
if ($status != 0) then
   echo "ERROR from preview namelist - EXITING"
   exit -1
endif

echo " CESM BUILDNML SCRIPT HAS FINISHED SUCCESSFULLY"
echo "-------------------------------------------------------------------------"
# -------------------------------------------------------------------------
# # Run the model
# # -------------------------------------------------------------------------
#
# sleep 25
 cd $RUNDIR
# echo "`date` -- CSM EXECUTION BEGINS HERE" 
#
# setenv OMP_NUM_THREADS 1
# # for mvapich
# #srun --ntasks=128 --cpu_bind=sockets --cpu_bind=verbose --kill-on-bad-exit $EXEROOT/cesm.exe >&! cesm.log.$LID
# # for mvapich2
#
#srun -p $JOBQUEUE --mpi=mvapich --ntasks=128 --cpu_bind=sockets --cpu_bind=verbose --kill-on-bad-exit $EXEROOT/cesm.exe >&! cesm.log.$LID

bsub -I -p -q   -n 128 -np 4 -cgsp 64 -b -host_stack 1024 -share_size 4096 $EXEROOT/cesm.exe >&! cesm.log.$LID
wait
echo "`date` -- CSM EXECUTION HAS FINISHED" 

# -------------------------------------------------------------------------
# Update env variables in case user changed them during run
# -------------------------------------------------------------------------

cd $CASEROOT
source ./Tools/ccsm_getenv

# -------------------------------------------------------------------------
# Check for successful run
# -------------------------------------------------------------------------

set sdate = `date +"%Y-%m-%d %H:%M:%S"`
cd $RUNDIR
set CESMLogFile = `ls -1t cesm.log* | head -1` 
if ($CESMLogFile == "") then
  echo "Model did not complete - no cesm.log file present - exiting"
  exit -1
endif
set CPLLogFile = `echo $CESMLogFile | sed -e 's/cesm/cpl/'`
if ($CPLLogFile == "") then
  echo "Model did not complete - no cpl.log file corresponding to most recent CESM log ($RUNDIR/$CESMLogFile)"
  exit -1
endif
set exceeded_max_time = 0
grep -q 'SUCCESSFUL TERMINATION' $CPLLogFile
if ( $status == 0 ) then
   echo "run SUCCESSFUL $sdate" >>& $CASEROOT/CaseStatus
else
  grep -q 'Wall clock time exceeds max_cplstep_time' $CPLLogFile
  if ( $status == 0 ) then
    echo "Model timestep time exceeded max_cplstep_time"
    echo "run EXCEEDED max_cplstep_time $sdate" >>& $CASEROOT/CaseStatus 
    set exceeded_max_time = 1
  else
    echo "Model did not complete - see $RUNDIR/$CESMLogFile" 
    echo "run FAILED $sdate" >>& $CASEROOT/CaseStatus 
    exit -1
  endif
endif


# -------------------------------------------------------------------------
# Save model output logs 
# -------------------------------------------------------------------------

gzip *.$LID
if ($LOGDIR != "") then
  if (! -d $LOGDIR/bld) mkdir -p $LOGDIR/bld || echo " problem in creating $LOGDIR/bld"
  cp -p $RUNDIR/*log.$LID.*   $LOGDIR/      
endif

# -------------------------------------------------------------------------
# Perform short term archiving of output
# -------------------------------------------------------------------------

cd $CASEROOT

if ($DOUT_S == 'TRUE' && $exceeded_max_time == 0) then
  echo "Archiving ccsm output to $DOUT_S_ROOT"
  echo "Calling the short-term archiving script st_archive"
   ./st_archive 
   cd $CASEROOT
# -------------------------------------------------------------------------
# Generate time series variable files - currently only working on yellowstone
# -------------------------------------------------------------------------
  if ($DOUT_S_GENERATE_TSERIES == 'TRUE') then
     if ($DOUT_S_SAVE_ALL_ON_DISK == 'TRUE' && $MACH == 'yellowstone') then
	if ($DOUT_S_SAVE_HISTORY_FILES == 'FALSE') then
	    echo "*WARNING* successful generation of the variable time series files"
	    echo "will delete all the time slice history files in $DOUT_S_ROOT"
	 else
	    echo "History time slice files will be saved after variable time series files"
	    echo "are generated. Please manually remove history files in order to"
	    echo "conserve disk space."
	 endif
         echo "Starting generating variable time series files to $DOUT_S_ROOT"
	 ./Tools/tseries_generate.submit >>& $CASEROOT/tseriesStatus
         echo "Completed generating variable time series files to $DOUT_S_ROOT"
     else
	 echo "Variable time series file generation depends on $DOUT_S and $DOUT_S_SAVE_ALL_ON_DISK set to TRUE"
	 echo "Variable time series files were not generated."   
     endif
  endif
endif

# -------------------------------------------------------------------------
# Submit longer term archiver if appropriate
# -------------------------------------------------------------------------


if ($DOUT_L_MS == 'TRUE' && $DOUT_S == 'TRUE' && $exceeded_max_time == 0) then
  echo "Long term archiving ccsm output using the script $CASE.l_archive"
  set num = 0
  if ($LBQUERY == "TRUE") then
     set num = `$BATCHQUERY | grep $CASE.l_archive | wc -l`
  endif
  if ($LBSUBMIT == "TRUE" && $num < 1) then
cat > templar <<EOF
    $BATCHSUBMIT ./$CASE.l_archive
EOF
    source templar
    if ($status != 0) then
      echo "ccsm_postrun error: problem sourcing templar " 
    endif
    rm templar
  endif 
endif

# -------------------------------------------------------------------------
# Resubmit another run script
# -------------------------------------------------------------------------

if ($RESUBMIT > 0 || $exceeded_max_time == 1 ) then
  if ($exceeded_max_time == 0) then
    @ RESUBMIT = $RESUBMIT - 1
    echo RESUBMIT is now $RESUBMIT

    #tcraig: reset CONTINUE_RUN on RESUBMIT if NOT doing timing runs
    #use COMP_RUN_BARRIERS as surrogate for timing run logical
    if ($?COMP_RUN_BARRIERS) then
      if (${COMP_RUN_BARRIERS} == "FALSE") then
         ./xmlchange -file env_run.xml -id CONTINUE_RUN -val TRUE
      endif
    else
      ./xmlchange -file env_run.xml -id CONTINUE_RUN -val TRUE
    endif
    ./xmlchange -file env_run.xml -id RESUBMIT     -val $RESUBMIT
  endif
   if ($LBSUBMIT == "TRUE") then
cat > tempres <<EOF
   $BATCHSUBMIT ./$CASE.run
EOF
     source tempres
     if ($status != 0) then
       echo "ccsm_postrun error: problem sourcing tempres " 
     endif
     rm tempres
   endif 
endif

if ($CHECK_TIMING == 'TRUE') then
  if !(-d timing) mkdir timing
  $CASETOOLS/getTiming.csh -lid $LID 
  gzip timing/cesm_timing_stats.$LID
endif

if ($SAVE_TIMING == 'TRUE') then
  mv $RUNDIR/timing $RUNDIR/timing.$LID
endif


